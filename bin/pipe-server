#!/usr/bin/env php
<?php

function includeIfExists($file)
{
    if (file_exists($file)) {
        return $file;
    }
}

if ((!$loader = includeIfExists(__DIR__.'/../autoload.php')) && (!$loader = includeIfExists(__DIR__.'/../../../autoload.php'))) {
    die('You must set up the project dependencies, run the following commands:'.PHP_EOL.
        'curl -s http://getcomposer.org/installer | php'.PHP_EOL.
        'php composer.phar install'.PHP_EOL);
}

require_once $loader;

use Ulrichsg\Getopt,
    React\Http\Server as HttpServer,
    React\Socket\Server as SocketServer,
    React\EventLoop\StreamSelectLoop,
    Pipe\Server,
    Pipe\Config;

$opts = new Getopt(array(
    array("p", "port", Getopt::OPTIONAL_ARGUMENT),
    array("h", "host", Getopt::OPTIONAL_ARGUMENT),
    array("c", "config", Getopt::OPTIONAL_ARGUMENT)
));

function displayUsage()
{
    return <<<EOT
Usage: pipe-server [-p <port>] [-h <host>] [-c <config>]

EOT;
}

$argv = $_SERVER['argv'];
array_shift($argv);

try {
    $opts->parse($argv);
} catch (\InvalidArgumentException $e) {
    fwrite(STDERR, displayUsage());
    exit(255);
}

$loop = new StreamSelectLoop;
$socketServer = new SocketServer($loop);
$httpServer = new HttpServer($socketServer);

$configFile = $opts->getOption("config") ?: "pipe_config.yml";
$config = Config::fromYaml($configFile);
$env = $config->createEnvironment();

$host = $opts->getOption("host") ?: "127.0.0.1";
$port = $opts->getOption("port") ?: "4000";

$httpServer->on("request", function($request, $response) use ($env) {
    $query = $request->getQuery();
    $headers = $request->getHeaders();
    $debug = false;

    $path = ltrim($request->getPath(), '/');

    if (@$query["debug"]) {
        $debug = true;
    }

    $asset = $env->find($path, array("bundled" => !$debug));

    if (!$asset) {
        $response->writeHead(404);
        fwrite(STDERR, sprintf("pipe-server: [404] Asset '%s' not found.\n", $path));
        return $response->end();
    }

    $body = $asset->getBody();

    $response->writeHead(200, array(
        "Content-Type" => $asset->getContentType(),
        "Max-Age" => 60
    ));

    $response->end($body);
});

$socketServer->listen($port, $host);

fwrite(STDERR, "Server running on $host:$port\n");
fwrite(STDERR, "Kill with [ctrl] + [c]\n");

$loop->run();

